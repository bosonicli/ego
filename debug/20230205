---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
File ~/.local/lib/python3.10/site-packages/IPython/core/formatters.py:338, in BaseFormatter.__call__(self, obj)
    336     pass
    337 else:
--> 338     return printer(obj)
    339 # Finally look for special method names
    340 method = get_real_method(obj, self.print_method)

File ~/.local/lib/python3.10/site-packages/IPython/core/pylabtools.py:152, in print_figure(fig, fmt, bbox_inches, base64, **kwargs)
    149     from matplotlib.backend_bases import FigureCanvasBase
    150     FigureCanvasBase(fig)
--> 152 fig.canvas.print_figure(bytes_io, **kw)
    153 data = bytes_io.getvalue()
    154 if fmt == 'svg':

File ~/.local/lib/python3.10/site-packages/matplotlib/backend_bases.py:2314, in FigureCanvasBase.print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)
   2308     renderer = _get_renderer(
   2309         self.figure,
   2310         functools.partial(
   2311             print_method, orientation=orientation)
   2312     )
   2313     with getattr(renderer, "_draw_disabled", nullcontext)():
-> 2314         self.figure.draw(renderer)
   2316 if bbox_inches:
   2317     if bbox_inches == "tight":

File ~/.local/lib/python3.10/site-packages/matplotlib/artist.py:74, in _finalize_rasterization.<locals>.draw_wrapper(artist, renderer, *args, **kwargs)
     72 @wraps(draw)
     73 def draw_wrapper(artist, renderer, *args, **kwargs):
---> 74     result = draw(artist, renderer, *args, **kwargs)
     75     if renderer._rasterizing:
     76         renderer.stop_rasterizing()

File ~/.local/lib/python3.10/site-packages/matplotlib/artist.py:51, in allow_rasterization.<locals>.draw_wrapper(artist, renderer)
     48     if artist.get_agg_filter() is not None:
     49         renderer.start_filter()
---> 51     return draw(artist, renderer)
     52 finally:
     53     if artist.get_agg_filter() is not None:

File ~/.local/lib/python3.10/site-packages/matplotlib/figure.py:3071, in Figure.draw(self, renderer)
   3068         # ValueError can occur when resizing a window.
   3070 self.patch.draw(renderer)
-> 3071 mimage._draw_list_compositing_images(
   3072     renderer, self, artists, self.suppressComposite)
   3074 for sfig in self.subfigs:
   3075     sfig.draw(renderer)

File ~/.local/lib/python3.10/site-packages/matplotlib/image.py:131, in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    129 if not_composite or not has_images:
    130     for a in artists:
--> 131         a.draw(renderer)
    132 else:
    133     # Composite any adjacent images together
    134     image_group = []

File ~/.local/lib/python3.10/site-packages/matplotlib/artist.py:51, in allow_rasterization.<locals>.draw_wrapper(artist, renderer)
     48     if artist.get_agg_filter() is not None:
     49         renderer.start_filter()
---> 51     return draw(artist, renderer)
     52 finally:
     53     if artist.get_agg_filter() is not None:

File ~/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py:3107, in _AxesBase.draw(self, renderer)
   3104         a.draw(renderer)
   3105     renderer.stop_rasterizing()
-> 3107 mimage._draw_list_compositing_images(
   3108     renderer, self, artists, self.figure.suppressComposite)
   3110 renderer.close_group('axes')
   3111 self.stale = False

File ~/.local/lib/python3.10/site-packages/matplotlib/image.py:131, in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    129 if not_composite or not has_images:
    130     for a in artists:
--> 131         a.draw(renderer)
    132 else:
    133     # Composite any adjacent images together
    134     image_group = []

File ~/.local/lib/python3.10/site-packages/matplotlib/artist.py:51, in allow_rasterization.<locals>.draw_wrapper(artist, renderer)
     48     if artist.get_agg_filter() is not None:
     49         renderer.start_filter()
---> 51     return draw(artist, renderer)
     52 finally:
     53     if artist.get_agg_filter() is not None:

File ~/.local/lib/python3.10/site-packages/matplotlib/axis.py:1305, in Axis.draw(self, renderer, *args, **kwargs)
   1302 renderer.open_group(__name__, gid=self.get_gid())
   1304 ticks_to_draw = self._update_ticks()
-> 1305 tlb1, tlb2 = self._get_ticklabel_bboxes(ticks_to_draw, renderer)
   1307 for tick in ticks_to_draw:
   1308     tick.draw(renderer)

File ~/.local/lib/python3.10/site-packages/matplotlib/axis.py:1232, in Axis._get_ticklabel_bboxes(self, ticks, renderer)
   1230 if renderer is None:
   1231     renderer = self.figure._get_renderer()
-> 1232 return ([tick.label1.get_window_extent(renderer)
   1233          for tick in ticks if tick.label1.get_visible()],
   1234         [tick.label2.get_window_extent(renderer)
   1235          for tick in ticks if tick.label2.get_visible()])

File ~/.local/lib/python3.10/site-packages/matplotlib/axis.py:1232, in <listcomp>(.0)
   1230 if renderer is None:
   1231     renderer = self.figure._get_renderer()
-> 1232 return ([tick.label1.get_window_extent(renderer)
   1233          for tick in ticks if tick.label1.get_visible()],
   1234         [tick.label2.get_window_extent(renderer)
   1235          for tick in ticks if tick.label2.get_visible()])

File ~/.local/lib/python3.10/site-packages/matplotlib/text.py:915, in Text.get_window_extent(self, renderer, dpi)
    910     raise RuntimeError(
    911         "Cannot get window extent of text w/o renderer. You likely "
    912         "want to call 'figure.draw_without_rendering()' first.")
    914 with cbook._setattr_cm(self.figure, dpi=dpi):
--> 915     bbox, info, descent = self._get_layout(self._renderer)
    916     x, y = self.get_unitless_position()
    917     x, y = self.get_transform().transform((x, y))

File ~/.local/lib/python3.10/site-packages/matplotlib/text.py:313, in Text._get_layout(self, renderer)
    310 ys = []
    312 # Full vertical extent of font, including ascenders and descenders:
--> 313 _, lp_h, lp_d = _get_text_metrics_with_cache(
    314     renderer, "lp", self._fontproperties,
    315     ismath="TeX" if self.get_usetex() else False, dpi=self.figure.dpi)
    316 min_dy = (lp_h - lp_d) * self._linespacing
    318 for i, line in enumerate(lines):

File ~/.local/lib/python3.10/site-packages/matplotlib/text.py:97, in _get_text_metrics_with_cache(renderer, text, fontprop, ismath, dpi)
     94 """Call ``renderer.get_text_width_height_descent``, caching the results."""
     95 # Cached based on a copy of fontprop so that later in-place mutations of
     96 # the passed-in argument do not mess up the cache.
---> 97 return _get_text_metrics_with_cache_impl(
     98     weakref.ref(renderer), text, fontprop.copy(), ismath, dpi)

File ~/.local/lib/python3.10/site-packages/matplotlib/text.py:105, in _get_text_metrics_with_cache_impl(renderer_ref, text, fontprop, ismath, dpi)
    101 @functools.lru_cache(4096)
    102 def _get_text_metrics_with_cache_impl(
    103         renderer_ref, text, fontprop, ismath, dpi):
    104     # dpi is unused, but participates in cache invalidation (via the renderer).
--> 105     return renderer_ref().get_text_width_height_descent(text, fontprop, ismath)

File ~/.local/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py:229, in RendererAgg.get_text_width_height_descent(self, s, prop, ismath)
    227     texmanager = self.get_texmanager()
    228     fontsize = prop.get_size_in_points()
--> 229     w, h, d = texmanager.get_text_width_height_descent(
    230         s, fontsize, renderer=self)
    231     return w, h, d
    233 if ismath:

File ~/.local/lib/python3.10/site-packages/matplotlib/texmanager.py:365, in TexManager.get_text_width_height_descent(cls, tex, fontsize, renderer)
    363 dpi_fraction = renderer.points_to_pixels(1.) if renderer else 1
    364 with dviread.Dvi(dvifile, 72 * dpi_fraction) as dvi:
--> 365     page, = dvi
    366 # A total height (including the descent) needs to be returned.
    367 return page.width, page.height + page.descent, page.descent

File ~/.local/lib/python3.10/site-packages/matplotlib/dviread.py:298, in Dvi.__iter__(self)
    282 def __iter__(self):
    283     """
    284     Iterate through the pages of the file.
    285 
   (...)
    296         integers.
    297     """
--> 298     while self._read():
    299         yield self._output()

File ~/.local/lib/python3.10/site-packages/matplotlib/dviread.py:377, in Dvi._read(self)
    375 while True:
    376     byte = self.file.read(1)[0]
--> 377     self._dtable[byte](self, byte)
    378     name = self._dtable[byte].__name__
    379     if name == "_push":

File ~/.local/lib/python3.10/site-packages/matplotlib/dviread.py:227, in _dispatch.<locals>.decorate.<locals>.wrapper(self, byte)
    225 if state is not None and self.state != state:
    226     raise ValueError("state precondition failed")
--> 227 return method(self, *[f(self, byte-min) for f in get_args])

File ~/.local/lib/python3.10/site-packages/matplotlib/dviread.py:528, in Dvi._fnt_def(self, k, c, s, d, a, l)
    526 @_dispatch(min=243, max=246, args=('olen1', 'u4', 'u4', 'u4', 'u1', 'u1'))
    527 def _fnt_def(self, k, c, s, d, a, l):
--> 528     self._fnt_def_real(k, c, s, d, a, l)

File ~/.local/lib/python3.10/site-packages/matplotlib/dviread.py:533, in Dvi._fnt_def_real(self, k, c, s, d, a, l)
    531 n = self.file.read(a + l)
    532 fontname = n[-l:].decode('ascii')
--> 533 tfm = _tfmfile(fontname)
    534 if c != 0 and tfm.checksum != 0 and c != tfm.checksum:
    535     raise ValueError('tfm checksum mismatch: %s' % n)

File ~/.local/lib/python3.10/site-packages/matplotlib/dviread.py:1147, in _fontfile(cls, suffix, texname)
   1145 @lru_cache()
   1146 def _fontfile(cls, suffix, texname):
-> 1147     return cls(_find_tex_file(texname + suffix))

File ~/.local/lib/python3.10/site-packages/matplotlib/_api/deprecation.py:384, in delete_parameter.<locals>.wrapper(*inner_args, **inner_kwargs)
    379 @functools.wraps(func)
    380 def wrapper(*inner_args, **inner_kwargs):
    381     if len(inner_args) <= name_idx and name not in inner_kwargs:
    382         # Early return in the simple, non-deprecated case (much faster than
    383         # calling bind()).
--> 384         return func(*inner_args, **inner_kwargs)
    385     arguments = signature.bind(*inner_args, **inner_kwargs).arguments
    386     if is_varargs and arguments.get(name):

File ~/.local/lib/python3.10/site-packages/matplotlib/dviread.py:1123, in _find_tex_file(filename, format)
   1121     return path
   1122 else:
-> 1123     raise FileNotFoundError(
   1124         f"Matplotlib's TeX implementation searched for a file named "
   1125         f"{filename!r} in your texmf tree, but could not find it")

FileNotFoundError: Matplotlib's TeX implementation searched for a file named 'cmss10.tfm' in your texmf tree, but could not find it

<Figure size 640x480 with 1 Axes>